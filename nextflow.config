/*
 * Copyright (c) 2013-2023, Seqera Labs.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This Source Code Form is "Incompatible With Secondary Licenses", as
 * defined by the Mozilla Public License, v. 2.0.
 *
 */
 
manifest {
  description = 'Proof of concept of a RNA-seq pipeline implemented with Nextflow' 
  author = 'Paolo Di Tommaso'
  nextflowVersion = '>=23.10.0'
}

/* 
 * default params 
 */
 
params.outdir = "results"
params.reads = "${projectDir}/data/ggal/ggal_gut_{1,2}.fq"
params.transcriptome = "${projectDir}/data/ggal/ggal_1_48850000_49020000.Ggal71.500bpflank.fa"
params.multiqc = "${projectDir}/multiqc"

/* 
 * defines execution profiles for different environments  
 */ 

profiles {
  standard {
    process.container = 'quay.io/nextflow/rnaseq-nf:v1.2.1'
  }

  'all-reads' {
    params.reads = "${projectDir}/data/ggal/ggal_*_{1,2}.fq"
  }

  // container with Docker
  docker {
    process.container = 'quay.io/nextflow/rnaseq-nf:v1.2.1'
    docker.enabled = true
  }

  // local SIF container with Singularity
  singLocal {
    process.container = 'file:///home/ubuntu/pditommaso_rnaseq-nf_latest.sif'
    singularity.enabled = true
  }

  // remote SIF container with Singularity
  singSIF {
    process.container = 'library://pditommaso/rnaseq-nf/latest.sif:latest'
    singularity.enabled = true
  }

  // Docker container with Singularity
  singularity {
    process.container = 'quay.io/nextflow/rnaseq-nf:v1.2.1'
    singularity.enabled = true
    // singularity.autoMounts = true
  }

  // Docker container with Singularity, managed pull
  singPull {
    process.container = 'quay.io/nextflow/rnaseq-nf:v1.2.1'
    singularity.enabled = true
    singularity.ociAutoPull = true
  }

  // Docker container with Singularity, OCI mode
  singOci {
    process.container = 'quay.io/nextflow/rnaseq-nf:v1.2.1'
    singularity.enabled = true
    singularity.ociMode = true
  }

  // conda packages through Wave Freezed container
  wave {
    wave.enabled = true
    wave.strategy = 'conda'
    wave.freeze = true
  }

  // conda packages through Wave Freezed SIF container,
  // with Singularity
  waveSing {
    wave.enabled = true
    wave.strategy = 'conda'
    wave.freeze = true
    singularity.enabled = true
  }

  // conda packages through Wave Freezed Docker container,
  // with Singularity (managed pull)
  // (OCI option used to trigger Docker format)
  waveSingPull {
    wave.enabled = true
    wave.strategy = 'conda'
    wave.freeze = true
    singularity.enabled = true
    singularity.ociAutoPull = true
  }

  // conda packages through Wave Freezed SIF container,
  // with Singularity,
  // Tower auth for improved rate limits and build logs
  waveSingBestPrac {
    wave.enabled = true
    wave.strategy = 'conda'
    wave.freeze = true
    singularity.enabled = true
    tower.accessToken = "$TOWER_ACCESS_TOKEN"
    tower.workspaceId = "$TOWER_WORKSPACE_ID"
  }

  // conda packages through Wave Freezed Docker container,
  // with Singularity (managed pull)
  // (OCI option used to trigger Docker format),
  // Tower auth for improved rate limits and build logs
  waveSingPullBestPrac {
    wave.enabled = true
    wave.strategy = 'conda'
    wave.freeze = true
    singularity.enabled = true
    singularity.ociAutoPull = true
    tower.accessToken = "$TOWER_ACCESS_TOKEN"
    tower.workspaceId = "$TOWER_WORKSPACE_ID"
  }

  // conda packages through Wave Freezed SIF container,
  // with Singularity,
  // host in custom registry
  waveBuildSing {
    wave.enabled = true
    wave.strategy = 'conda'
    wave.freeze = true
    singularity.enabled = true
    tower.accessToken = "$TOWER_ACCESS_TOKEN"
    tower.workspaceId = "$TOWER_WORKSPACE_ID"
    wave.build.repository = 'quay.io/marcodelapierre/wavebuild'
  }

  // conda packages through Wave Freezed Docker container,
  // with Singularity (managed pull),
  // (OCI option used to trigger Docker format)
  // host in custom registry
  waveBuildSingPull {
    wave.enabled = true
    wave.strategy = 'conda'
    wave.freeze = true
    singularity.enabled = true
    singularity.ociAutoPull = true
    tower.accessToken = "$TOWER_ACCESS_TOKEN"
    tower.workspaceId = "$TOWER_WORKSPACE_ID"
    wave.build.repository = 'quay.io/marcodelapierre/wavebuild'
  }

  conda {
    conda.enabled = true
    conda.channels = 'seqera,conda-forge,bioconda,defaults'
  }
  
}
